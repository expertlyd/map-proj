{"version":3,"sources":["assets/disaster_location_icon.svg","components/DisasterLocationIcon.js","components/DisasterMarkers.js","components/MapView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DisasterLocationIcon","L","icon","iconUrl","require","iconRetinaUrl","iconAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","className","DisasterMarkers","props","venues","markers","map","venue","index","Marker","key","position","geometry","Tooltip","permanent","name","MapView","state","centerLocation","lat","lng","zoom","disasterLocations","randCountry","data","Math","floor","random","length","longt","newState","this","setState","Map","center","zoomSnap","TileLayer","url","attribution","id","onClick","handleButtonClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wuwCAAAA,EAAOC,QAAU,IAA0B,oD,2NCE9BC,E,OAAuBC,EAAEC,KAAK,CACzCC,QAASC,EAAQ,IACjBC,cAAeD,EAAQ,IACvBE,WAAY,KACZC,UAAW,KACXC,WAAY,KACZC,aAAc,KACdC,SAAU,CAAC,GAAI,IACfC,UAAW,uBCaEC,G,MAlBS,SAACC,GAAW,IAC1BC,EAAWD,EAAXC,OACR,IAAKA,EACH,OAAO,KAGT,IAAMC,EAAUD,EAAOE,KAAI,SAACC,EAAOC,GAAR,OACzB,kBAACC,EAAA,EAAD,CAAQC,IAAKF,EAAOG,SAAUJ,EAAMK,SAAUpB,KAAMF,GAElD,kBAACuB,EAAA,EAAD,CAASC,WAAS,GACd,0BAAMb,UAAU,aAAaM,EAAMQ,WAK3C,OAAO,kBAAC,WAAD,KAAWV,KCyCLW,E,kDAtDb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXC,eAAgB,CAAEC,IAAK,GAAIC,IAAK,GAChCC,KAAM,IACNC,kBAAmB,MALJ,E,gEAYjB,IAAMC,EAAcC,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,SAErDT,EAAMI,EAAY,cAClBM,EAAQN,EAAY,eAGlBO,EAAW,CACfZ,eAAgB,CAAEC,IAAKA,EAAKC,IAAKS,GACjCR,KAAM,KACNC,kBAAmB,CAAC,CACd,KAAQC,EAAY,aACpB,SAAY,CACVJ,EACAU,MAIVE,KAAKC,SAASF,K,+BAGN,IAAD,SAC0BC,KAAKd,MAA9BC,EADD,EACCA,eAAgBG,EADjB,EACiBA,KAExB,OACE,6BACE,kBAACY,EAAA,EAAD,CAAKC,OAAQhB,EAAgBG,KAAMA,EAAMc,SAAU,KAC/C,kBAACC,EAAA,EAAD,CACAC,IAAI,qDACJC,YAAY,2EAGZ,kBAAC,EAAD,CAASlC,OAAQ2B,KAAKd,MAAMK,qBAEhC,4BAAQiB,GAAG,MAAMC,QAAS,kBAAM,EAAKC,sBAArC,uB,GA9CcC,a,MCMPC,MARf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,QCKc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d55c27e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/disaster_location_icon.2ceaf661.svg\";","import L from 'leaflet';\n\nexport const DisasterLocationIcon = L.icon({\n  iconUrl: require('../assets/disaster_location_icon.svg'),\n  iconRetinaUrl: require('../assets/disaster_location_icon.svg'),\n  iconAnchor: null,\n  shadowUrl: null,\n  shadowSize: null,\n  shadowAnchor: null,\n  iconSize: [70, 70],\n  className: 'leaflet-venue-icon'\n});\n","import React, { Fragment } from 'react'\nimport {Marker, Tooltip} from 'react-leaflet';\nimport {DisasterLocationIcon} from './DisasterLocationIcon';\nimport DisasterPopup from './DisasterPopup';\n\nconst DisasterMarkers = (props) => {\n  const { venues } = props;\n  if (!venues) {\n    return null;\n  }\n\n  const markers = venues.map((venue, index) => (\n    <Marker key={index} position={venue.geometry} icon={DisasterLocationIcon}>\n      {/*<DisasterPopup data={venue}/>*/}\n      <Tooltip permanent>\n          <span className='poup-text'>{venue.name}</span>\n      </Tooltip>\n    </Marker>\n  ));\n\n  return <Fragment>{markers}</Fragment>\n};\n\nexport default DisasterMarkers;\n","import React, { Component } from 'react';\nimport { Map, TileLayer } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport data from '../assets/countries';\nimport Markers from './DisasterMarkers';\n\nclass MapView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      centerLocation: { lat: 20, lng: 0 },\n      zoom: 3.2,\n      disasterLocations: null,\n    };\n    // zoom level 3: world view\n    // zoom level 4: bigger view\n  }\n\n  handleButtonClick() {\n    const randCountry = data[Math.floor(Math.random() * data.length)];\n    //let countryName = randCountry[\"\\\"Country\\\"\"];\n    let lat = randCountry[\"\\\"Latitude\\\"\"];\n    let longt = randCountry[\"\\\"Longitude\\\"\"];\n    //console.log(lat, longt);\n\n    const newState = {\n      centerLocation: { lat: lat, lng: longt },\n      zoom: 4.45,\n      disasterLocations: [{\n            \"name\": randCountry[\"\\\"Country\\\"\"],\n            \"geometry\": [\n              lat,\n              longt\n            ]\n      }],\n    };\n    this.setState(newState);\n  }\n\n  render() {\n    const { centerLocation, zoom } = this.state;\n\n    return (\n      <div>\n        <Map center={centerLocation} zoom={zoom} zoomSnap={0.05}>\n            <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n            />\n\n            <Markers venues={this.state.disasterLocations}/>\n        </Map>\n        <button id=\"btn\" onClick={() => this.handleButtonClick()}>\n            Random Country\n        </button>\n\n      </div>\n    );\n  }\n}\n\nexport default MapView;","import React from 'react';\nimport MapView from './components/MapView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapView/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ========================================\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}